
AVR_GPIO_NEW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000185  00800100  00800100  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cba  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000977  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ef  00000000  00000000  00001a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003df  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002997  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	02 c1       	rjmp	.+516    	; 0x24e <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 38       	cpi	r26, 0x85	; 133
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1c d1       	rcall	.+568    	; 0x2fc <main>
  c4:	22 c1       	rjmp	.+580    	; 0x30a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Set0>:

void SetCell(unsigned char R, unsigned char G, unsigned char B, unsigned char index)
{
	matrix[index].R = R;
	matrix[index].G = G;
	matrix[index].B = B;
  c8:	c1 9a       	sbi	0x18, 1	; 24
	...
  d2:	00 00       	nop
  d4:	c1 98       	cbi	0x18, 1	; 24
  d6:	08 95       	ret

000000d8 <Set1>:
  d8:	c1 9a       	sbi	0x18, 1	; 24
	...
  ee:	00 00       	nop
  f0:	c1 98       	cbi	0x18, 1	; 24
  f2:	08 95       	ret

000000f4 <Reset>:
  f4:	c1 98       	cbi	0x18, 1	; 24
  f6:	8f ee       	ldi	r24, 0xEF	; 239
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <Reset+0x6>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <Reset+0xc>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <SetMatrix>:
}


void SetMatrix(RGB temp[MAX])
{
 104:	dc 01       	movw	r26, r24
 106:	12 96       	adiw	r26, 0x02	; 2
	int i=0;
	for(i = 0; i < MAX; i ++)
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
	{
		SetCell(temp[i].R,temp[i].G,temp[i].B,i);
 10c:	2c 91       	ld	r18, X
 10e:	fd 01       	movw	r30, r26
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	30 81       	ld	r19, Z
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	40 81       	ld	r20, Z
}


void SetCell(unsigned char R, unsigned char G, unsigned char B, unsigned char index)
{
	matrix[index].R = R;
 118:	fc 01       	movw	r30, r24
 11a:	ff 27       	eor	r31, r31
 11c:	bf 01       	movw	r22, r30
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	e6 0f       	add	r30, r22
 124:	f7 1f       	adc	r31, r23
 126:	e0 50       	subi	r30, 0x00	; 0
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	40 83       	st	Z, r20
	matrix[index].G = G;
 12c:	31 83       	std	Z+1, r19	; 0x01
	matrix[index].B = B;
 12e:	22 83       	std	Z+2, r18	; 0x02


void SetMatrix(RGB temp[MAX])
{
	int i=0;
	for(i = 0; i < MAX; i ++)
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	13 96       	adiw	r26, 0x03	; 3
 134:	80 34       	cpi	r24, 0x40	; 64
 136:	91 05       	cpc	r25, r1
 138:	49 f7       	brne	.-46     	; 0x10c <SetMatrix+0x8>
	{
		SetCell(temp[i].R,temp[i].G,temp[i].B,i);
	}
	
}
 13a:	08 95       	ret

0000013c <PrintCell>:

void PrintCell(unsigned char index) /*must be called 0-to-MAX*/
{
 13c:	af 92       	push	r10
 13e:	bf 92       	push	r11
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	68 94       	set
 150:	aa 24       	eor	r10, r10
 152:	a3 f8       	bld	r10, 3
 154:	b1 2c       	mov	r11, r1
	unsigned char dummy = 0b10000000;
 156:	c0 e8       	ldi	r28, 0x80	; 128
	int i = 0;
	
	for(i = 0; i < 8 ; i++)
	{
		(matrix[index].G & dummy) == dummy ? Set1() : Set0();
 158:	c8 2e       	mov	r12, r24
 15a:	d1 2c       	mov	r13, r1
 15c:	76 01       	movw	r14, r12
 15e:	ee 0c       	add	r14, r14
 160:	ff 1c       	adc	r15, r15
 162:	c7 01       	movw	r24, r14
 164:	8c 0d       	add	r24, r12
 166:	9d 1d       	adc	r25, r13
 168:	9c 01       	movw	r18, r24
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3e 4f       	sbci	r19, 0xFE	; 254
 16e:	79 01       	movw	r14, r18
 170:	86 01       	movw	r16, r12
 172:	f7 01       	movw	r30, r14
 174:	90 81       	ld	r25, Z
 176:	9c 23       	and	r25, r28
 178:	9c 13       	cpse	r25, r28
 17a:	02 c0       	rjmp	.+4      	; 0x180 <PrintCell+0x44>
 17c:	ad df       	rcall	.-166    	; 0xd8 <Set1>
 17e:	01 c0       	rjmp	.+2      	; 0x182 <PrintCell+0x46>
 180:	a3 df       	rcall	.-186    	; 0xc8 <Set0>
		dummy = dummy >> 1;
 182:	c6 95       	lsr	r28
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	af 1a       	sub	r10, r31
 188:	b1 08       	sbc	r11, r1
void PrintCell(unsigned char index) /*must be called 0-to-MAX*/
{
	unsigned char dummy = 0b10000000;
	int i = 0;
	
	for(i = 0; i < 8 ; i++)
 18a:	91 f7       	brne	.-28     	; 0x170 <PrintCell+0x34>
 18c:	68 94       	set
 18e:	ee 24       	eor	r14, r14
 190:	e3 f8       	bld	r14, 3
 192:	f1 2c       	mov	r15, r1
 194:	c0 e8       	ldi	r28, 0x80	; 128
	}
	dummy = 0b10000000;
	
	for(i = 0; i < 8 ; i++)
	{
		(matrix[index].R & dummy) == dummy ? Set1() : Set0();
 196:	68 01       	movw	r12, r16
 198:	cc 0c       	add	r12, r12
 19a:	dd 1c       	adc	r13, r13
 19c:	c6 01       	movw	r24, r12
 19e:	80 0f       	add	r24, r16
 1a0:	91 1f       	adc	r25, r17
 1a2:	9c 01       	movw	r18, r24
 1a4:	20 50       	subi	r18, 0x00	; 0
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	69 01       	movw	r12, r18
 1aa:	f6 01       	movw	r30, r12
 1ac:	80 81       	ld	r24, Z
 1ae:	8c 23       	and	r24, r28
 1b0:	8c 13       	cpse	r24, r28
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <PrintCell+0x7c>
 1b4:	91 df       	rcall	.-222    	; 0xd8 <Set1>
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <PrintCell+0x7e>
 1b8:	87 df       	rcall	.-242    	; 0xc8 <Set0>
		dummy = dummy >> 1;
 1ba:	c6 95       	lsr	r28
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	ef 1a       	sub	r14, r31
 1c0:	f1 08       	sbc	r15, r1
		(matrix[index].G & dummy) == dummy ? Set1() : Set0();
		dummy = dummy >> 1;
	}
	dummy = 0b10000000;
	
	for(i = 0; i < 8 ; i++)
 1c2:	99 f7       	brne	.-26     	; 0x1aa <PrintCell+0x6e>
 1c4:	68 94       	set
 1c6:	ee 24       	eor	r14, r14
 1c8:	e3 f8       	bld	r14, 3
 1ca:	f1 2c       	mov	r15, r1
 1cc:	c0 e8       	ldi	r28, 0x80	; 128
		dummy = dummy >> 1;
	}
	dummy = 0b10000000;
	for(i = 0; i < 8 ; i++)
	{
		(matrix[index].B & dummy) == dummy ? Set1() : Set0();
 1ce:	c8 01       	movw	r24, r16
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	08 0f       	add	r16, r24
 1d6:	19 1f       	adc	r17, r25
 1d8:	0e 5f       	subi	r16, 0xFE	; 254
 1da:	1e 4f       	sbci	r17, 0xFE	; 254
 1dc:	f8 01       	movw	r30, r16
 1de:	80 81       	ld	r24, Z
 1e0:	8c 23       	and	r24, r28
 1e2:	8c 13       	cpse	r24, r28
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <PrintCell+0xae>
 1e6:	78 df       	rcall	.-272    	; 0xd8 <Set1>
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <PrintCell+0xb0>
 1ea:	6e df       	rcall	.-292    	; 0xc8 <Set0>
		dummy = dummy >> 1;
 1ec:	c6 95       	lsr	r28
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	ef 1a       	sub	r14, r31
 1f2:	f1 08       	sbc	r15, r1
	{
		(matrix[index].R & dummy) == dummy ? Set1() : Set0();
		dummy = dummy >> 1;
	}
	dummy = 0b10000000;
	for(i = 0; i < 8 ; i++)
 1f4:	99 f7       	brne	.-26     	; 0x1dc <PrintCell+0xa0>
	{
		(matrix[index].B & dummy) == dummy ? Set1() : Set0();
		dummy = dummy >> 1;
	}
	dummy = 0b10000000;
}
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	df 90       	pop	r13
 202:	cf 90       	pop	r12
 204:	bf 90       	pop	r11
 206:	af 90       	pop	r10
 208:	08 95       	ret

0000020a <PrintMatrix>:

void PrintMatrix(int max)
{
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
	int i;
	
	for(i = 0; i < max; i++)
 212:	18 16       	cp	r1, r24
 214:	19 06       	cpc	r1, r25
 216:	4c f4       	brge	.+18     	; 0x22a <PrintMatrix+0x20>
 218:	8c 01       	movw	r16, r24
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintCell(i);
 21e:	8c 2f       	mov	r24, r28
 220:	8d df       	rcall	.-230    	; 0x13c <PrintCell>

void PrintMatrix(int max)
{
	int i;
	
	for(i = 0; i < max; i++)
 222:	21 96       	adiw	r28, 0x01	; 1
 224:	c0 17       	cp	r28, r16
 226:	d1 07       	cpc	r29, r17
 228:	d1 f7       	brne	.-12     	; 0x21e <PrintMatrix+0x14>
	{
		PrintCell(i);
	}
	
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <init>:

void init()
{
	//DDRA = 0b11111111;	//for debug
	DDRB = 0b00000010;	//Data Transport Pin
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	87 bb       	out	0x17, r24	; 23
	
	UCSR0A = 0b00000000;/*Usart Control & Status Register A (initialize)*/
 238:	1b b8       	out	0x0b, r1	; 11
	
	UCSR0B = 0b10011000;	/*Usart Control & Status Register B
 23a:	88 e9       	ldi	r24, 0x98	; 152
 23c:	8a b9       	out	0x0a, r24	; 10
							 *2 UCSZ02: Character Size (UCSZ01, UCSZ00 is at UCSR0C)
							 UCSZ02 UCSZ01 UCSZ00
							 0		1		1		8-bit
							 */
	
	UCSR0C = 0b00000110;	/*Usart Control & Status Register C
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>

							 *2 UCSZ01: Character Size 1:0 (UCSZ02 is at UCSR0B)
							 *1 UCSZ00:
							 */
	
	UBRR0H = BAUD_H;			/*Usart Baud Rate Register 11:0 (15:12 reserved)*/
 244:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = BAUD;
 248:	87 e6       	ldi	r24, 0x67	; 103
 24a:	89 b9       	out	0x09, r24	; 9
 24c:	08 95       	ret

0000024e <__vector_18>:
	
}

ISR(USART0_RX_vect)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	0b b6       	in	r0, 0x3b	; 59
 25a:	0f 92       	push	r0
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	//PORTA = counterColor + 1; //for debug

	rx[counterColor++] = UDR0;
 274:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <counterColor>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	8e 0f       	add	r24, r30
 27c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <counterColor>
 280:	9c b1       	in	r25, 0x0c	; 12
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ef 57       	subi	r30, 0x7F	; 127
 286:	fd 4f       	sbci	r31, 0xFD	; 253
 288:	90 83       	st	Z, r25
	if(counterColor == 4)
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	21 f5       	brne	.+72     	; 0x2d6 <__vector_18+0x88>
	{
		if(rx[3] == 64) //RESET CODE
 28e:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <rx+0x3>
 292:	e0 34       	cpi	r30, 0x40	; 64
 294:	31 f4       	brne	.+12     	; 0x2a2 <__vector_18+0x54>
		{
			SetMatrix(CLEAR);
 296:	81 ec       	ldi	r24, 0xC1	; 193
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	34 df       	rcall	.-408    	; 0x104 <SetMatrix>

			rx[3] = 0;
 29c:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <rx+0x3>
 2a0:	14 c0       	rjmp	.+40     	; 0x2ca <__vector_18+0x7c>
		}
		else
		{
			SetCell(rx[0],rx[1],rx[2],rx[3]);
 2a2:	a1 e8       	ldi	r26, 0x81	; 129
 2a4:	b2 e0       	ldi	r27, 0x02	; 2
 2a6:	12 96       	adiw	r26, 0x02	; 2
 2a8:	8c 91       	ld	r24, X
 2aa:	12 97       	sbiw	r26, 0x02	; 2
 2ac:	11 96       	adiw	r26, 0x01	; 1
 2ae:	9c 91       	ld	r25, X
 2b0:	11 97       	sbiw	r26, 0x01	; 1
}


void SetCell(unsigned char R, unsigned char G, unsigned char B, unsigned char index)
{
	matrix[index].R = R;
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	9f 01       	movw	r18, r30
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	e2 0f       	add	r30, r18
 2bc:	f3 1f       	adc	r31, r19
 2be:	e0 50       	subi	r30, 0x00	; 0
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	2c 91       	ld	r18, X
 2c4:	20 83       	st	Z, r18
	matrix[index].G = G;
 2c6:	91 83       	std	Z+1, r25	; 0x01
	matrix[index].B = B;
 2c8:	82 83       	std	Z+2, r24	; 0x02
		else
		{
			SetCell(rx[0],rx[1],rx[2],rx[3]);
		}
		
		counterColor = 0;
 2ca:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <counterColor>
		Reset();
 2ce:	12 df       	rcall	.-476    	; 0xf4 <Reset>
		PrintMatrix(MAX);
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9a df       	rcall	.-204    	; 0x20a <PrintMatrix>
	}
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0b be       	out	0x3b, r0	; 59
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <main>:

int main(void)
{
	init();
 2fc:	9b df       	rcall	.-202    	; 0x234 <init>
	
	Reset();
 2fe:	fa de       	rcall	.-524    	; 0xf4 <Reset>
	PrintMatrix(MAX);
 300:	80 e4       	ldi	r24, 0x40	; 64
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	82 df       	rcall	.-252    	; 0x20a <PrintMatrix>
	
	sei();					//Global Interrupt Enabled
 306:	78 94       	sei
	
	for(;;)
	{
		
	}
 308:	ff cf       	rjmp	.-2      	; 0x308 <main+0xc>

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
